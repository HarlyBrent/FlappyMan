import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Random;
import javax.swing.*;

public class FlappyMan extends JPanel implements ActionListener, KeyListener, MouseListener, MouseMotionListener {
    int boardWidth = 460;
    int boardHeight = 640;

    Image backgroundImg;
    Image supermanImg;
    Image batmanImg;
    Image jokermanImg;
    Image topKryptoniteImg;
    Image bottomKryptoniteImg;

    int manX = boardWidth / 8;
    int manY = boardWidth / 2;
    int manWidth = 62;
    int manHeight = 58;

    class Man {
        int x = manX;
        int y = manY;
        int width = manWidth;
        int height = manHeight;
        Image img;

        Man(Image img) {
            this.img = img;
        }
    }

    int KryptoniteX = boardWidth;
    int KryptoniteY = 0;
    int KryptoniteWidth = 60;
    int KryptoniteHeight = 512;

    class Kryptonite {
        int x = KryptoniteX;
        int y = KryptoniteY;
        int width = KryptoniteWidth;
        int height = KryptoniteHeight;
        Image img;
        boolean passed = false;

        Kryptonite(Image img) {
            this.img = img;
        }
    }

    Man man;
    int velocityX = -4;
    int velocityY = 0;
    int gravity = 1;

    ArrayList<Kryptonite> Kryptonites;
    Random random = new Random();

    Timer gameLoop;
    Timer placeKryptoniteTimer;
    boolean supermanDied = false;
    double score = 0;

    boolean isHomePage = true;
    boolean isGameRunning = false;

    JButton playButton;
    JButton highScoreButton;

    ArrayList<HighScore> highScores = new ArrayList<>();

    class HighScore {
        String name;
        double score;

        HighScore(String name, double score) {
            this.name = name;
            this.score = score;
        }
    }

    JRadioButton supermanButton;
    JRadioButton batmanButton; 
    JRadioButton jokermanButton;
    ButtonGroup characterGroup;
    JPanel selectionPanel;


    FlappyMan() {
        setPreferredSize(new Dimension(boardWidth, boardHeight));
        setFocusable(true);
        addKeyListener(this);
        addMouseListener(this);
        addMouseMotionListener(this);

        backgroundImg = new ImageIcon(getClass().getResource("./flappymanbg2.png")).getImage();
        supermanImg = new ImageIcon(getClass().getResource("./Superman1.png")).getImage();
        batmanImg = new ImageIcon(getClass().getResource("./Batman.png")).getImage();
        jokermanImg = new ImageIcon(getClass().getResource("./Joker.png")).getImage();
        topKryptoniteImg = new ImageIcon(getClass().getResource("./topKryptonite4.png")).getImage();
        bottomKryptoniteImg = new ImageIcon(getClass().getResource("./bottomKryptonite3.png")).getImage();

        man = new Man(supermanImg);
        Kryptonites = new ArrayList<>();

        placeKryptoniteTimer = new Timer(1500, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                placeKryptonite();
            }
        });

        gameLoop = new Timer(1000 / 60, this);

        playButton = new JButton("Play");
        Font buttonFont = playButton.getFont();
        playButton.setFont(new Font(buttonFont.getName(), Font.BOLD, 20));
        playButton.setOpaque(false);
        playButton.setContentAreaFilled(false);
        playButton.setBorderPainted(false);
        playButton.setForeground(Color.BLACK);
        playButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                startGame();
            }
        });

        highScoreButton = new JButton("High Score");
        Font button1Font = highScoreButton.getFont();
        highScoreButton.setFont(new Font(button1Font.getName(), Font.BOLD, 20));
        highScoreButton.setOpaque(false);
        highScoreButton.setContentAreaFilled(false);
        highScoreButton.setBorderPainted(false);
        highScoreButton.setForeground(Color.BLACK);
        highScoreButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showHighScore();
            }
        });

        supermanButton = new JRadioButton("Superman", true);
        batmanButton = new JRadioButton("Batman");
        jokermanButton = new JRadioButton("Joker");

        characterGroup = new ButtonGroup();
        characterGroup.add(supermanButton);
        characterGroup.add(batmanButton);
        characterGroup.add(jokermanButton);

        selectionPanel = new JPanel();
        selectionPanel.add(supermanButton);
        selectionPanel.add(batmanButton);
        selectionPanel.add(jokermanButton);
        selectionPanel.setOpaque(false);

        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.CENTER;

        add(playButton, gbc);

        gbc.gridy++;
        add(highScoreButton, gbc);

        gbc.gridy++;
        add(selectionPanel, gbc);
    }

    void startGame() {
        isHomePage = false;
        isGameRunning = true;
        playButton.setVisible(false);
        highScoreButton.setVisible(false);
        selectionPanel.setVisible(false);

        if (supermanButton.isSelected()) {
            man = new Man(supermanImg);
        } else if (batmanButton.isSelected()) {
            man = new Man(batmanImg);
        } else if (jokermanButton.isSelected()) {
            man = new Man(jokermanImg);
        }

        Kryptonites.clear();
        supermanDied = false;
        score = 0;
        placeKryptoniteTimer.start();
        gameLoop.start();
    }

    void showHighScore() {
        Collections.sort(highScores, new Comparator<HighScore>() {
            @Override
            public int compare(HighScore o1, HighScore o2) {
                return Double.compare(o2.score, o1.score);
            }
        });

        StringBuilder highScoreMessage = new StringBuilder("High Scores:\n");
        for (HighScore highScore : highScores) {
            highScoreMessage.append(highScore.name).append(": ").append((int) highScore.score).append("\n");
        }

        JOptionPane.showMessageDialog(this, highScoreMessage.toString(), "High Score", JOptionPane.INFORMATION_MESSAGE);
    }

    void placeKryptonite() {
        int randomKryptoniteY = (int) (KryptoniteY - KryptoniteHeight / 4 - Math.random() * (KryptoniteHeight / 2));
        int openingSpace = boardHeight / 3;

        Kryptonite topKryptonite = new Kryptonite(topKryptoniteImg);
        topKryptonite.y = randomKryptoniteY;
        Kryptonites.add(topKryptonite);

        Kryptonite bottomKryptonite = new Kryptonite(bottomKryptoniteImg);
        bottomKryptonite.y = topKryptonite.y + KryptoniteHeight + openingSpace;
        Kryptonites.add(bottomKryptonite);
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        draw(g);
    }

    public void draw(Graphics g) {
        if (isHomePage) {
            g.fillRect(0, 0, boardWidth, boardHeight);
            g.setColor(Color.BLACK);
            g.setFont(new Font("calibri", Font.BOLD, 40));
            g.drawImage(backgroundImg, 0, 0, this.boardWidth, this.boardHeight, null);
            g.drawString("Flappy Man", boardWidth / 2 - 90, boardHeight / 3);
        } else {
            g.drawImage(backgroundImg, 0, 0, this.boardWidth, this.boardHeight, null);
            g.drawImage(man.img, man.x, man.y, man.width, man.height, null);

            for (int i = 0; i < Kryptonites.size(); i++) {
                Kryptonite Kryptonite = Kryptonites.get(i);
                g.drawImage(Kryptonite.img, Kryptonite.x, Kryptonite.y, Kryptonite.width, Kryptonite.height, null);
            }

            g.setColor(Color.RED);
            g.setFont(new Font("Arial", Font.PLAIN, 32));
            if (supermanDied) {
                g.drawString("Game Over: " + String.valueOf((int) score), 10, 35);
            }
            else {
                g.drawString(String.valueOf((int) score), 10, 35);
            }
        }
    }

    public void move() {
        velocityY += gravity;
        man.y += velocityY;
        man.y = Math.max(man.y, 0);

        for (int i = 0; i < Kryptonites.size(); i++) {
            Kryptonite Kryptonite = Kryptonites.get(i);
            Kryptonite.x += velocityX;

            if (!Kryptonite.passed && man.x > Kryptonite.x + man.width) {
                score += 0.5;
                Kryptonite.passed = true;
            }

            if (collision(man, Kryptonite)) {
                supermanDied = true;
            }
        }

        if (man.y > boardHeight) {
            supermanDied = true;
        }
    }

    boolean collision(Man a, Kryptonite b) {
        return a.x < b.x + b.width &&
               a.x + a.width > b.x &&
               a.y < b.y + b.height &&
               a.y + a.height > b.y;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (isGameRunning) {
            move();
            repaint();
            if (supermanDied) {
                placeKryptoniteTimer.stop();
                gameLoop.stop();
                isGameRunning = false;
                String name = JOptionPane.showInputDialog(this, "Enter your name:", "Game Over", JOptionPane.PLAIN_MESSAGE);
                if (name != null && !name.trim().isEmpty()) {
                    highScores.add(new HighScore(name, score));
                }
                isHomePage = true;
                playButton.setVisible(true);
                highScoreButton.setVisible(true);
                selectionPanel.setVisible(true);
            }
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (isGameRunning && e.getKeyCode() == KeyEvent.VK_SPACE) {
            velocityY = -9;
            if (supermanDied) {
                startGame();
            }
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (isGameRunning) {
            velocityY = -9;
            if (supermanDied) {
                startGame();
            }
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {}

    @Override
    public void keyReleased(KeyEvent e) {}

    @Override
    public void mousePressed(MouseEvent e) {}

    @Override
    public void mouseReleased(MouseEvent e) {}

    @Override
    public void mouseEntered(MouseEvent e) {}

    @Override
    public void mouseExited(MouseEvent e) {}

    @Override
    public void mouseDragged(MouseEvent e) {}

    @Override
    public void mouseMoved(MouseEvent e) {}
}
